plugins {
    id("io.quarkus") version "3.2.3.Final"
    jacoco
}

jacoco {
    toolVersion = "0.8.10"
}

// Configure execution data collection for Quarkus-specific tasks
tasks.named("quarkusTest") {
    extensions.configure<JacocoTaskExtension> {
        isEnabled = true
        destinationFile = layout.buildDirectory.file("jacoco/quarkusTest.exec").get().asFile
    }
    finalizedBy(tasks.jacocoTestReport)
}

tasks.named("quarkusIntegrationTest") {
    extensions.configure<JacocoTaskExtension> {
        isEnabled = true
        destinationFile = layout.buildDirectory.file("jacoco/quarkusIntegrationTest.exec").get().asFile
    }
    finalizedBy(tasks.jacocoTestReport)
}

// Configure combined coverage report
tasks.jacocoTestReport {
    dependsOn(tasks.named("quarkusTest"), tasks.named("quarkusIntegrationTest"))

    executionData.setFrom(
        fileTree(layout.buildDirectory.dir("jacoco")).include("*.exec")
    )

    reports {
        xml.required.set(true)
        html.required.set(true)
        html.outputLocation.set(layout.buildDirectory.dir("reports/jacoco"))
    }

    classDirectories.from(
        sourceSets.main.get().output.classesDirs
    )

    sourceDirectories.from(
        sourceSets.main.get().allSource.srcDirs
    )
}

// Optional coverage verification
tasks.jacocoTestCoverageVerification {
    dependsOn(tasks.jacocoTestReport)
    executionData.from(tasks.jacocoTestReport.get().executionData)

    violationRules {
        rule {
            limit {
                minimum = "0.80".toBigDecimal()
            }
        }
    }
}