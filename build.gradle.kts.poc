plugins {
    id("org.jetbrains.kotlin.jvm") version "1.9.0"
    id("io.quarkus") version "3.2.3.Final"
    jacoco
}

// Configure common test settings
tasks.withType<Test> {
    useJUnitPlatform()
    systemProperty("java.util.logging.manager", "org.jboss.logmanager.LogManager")

    // Common JaCoCo configuration
    configure<JacocoTaskExtension> {
        isEnabled = true
        destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
    }
}

// Configure test task relationships
tasks {
    val quarkusTest by getting(Test::class) {
        group = "Verification"
        description = "Run unit tests"
    }

    val quarkusIntegrationTest by getting(Test::class) {
        group = "Verification"
        description = "Run integration tests"
        shouldRunAfter(quarkusTest)
    }

    // Main test lifecycle task
    register("test") {
        group = "Verification"
        description = "Run all tests"
        dependsOn(quarkusTest, quarkusIntegrationTest)
        finalizedBy(jacocoTestReport)
    }

    // JaCoCo report configuration
    jacocoTestReport {
        dependsOn(quarkusTest, quarkusIntegrationTest)

        executionData.from(
            fileTree(layout.buildDirectory.dir("jacoco")).include("*.exec")
        )

        reports {
            xml.required.set(true)
            html.required.set(true)
            html.outputLocation.set(layout.buildDirectory.dir("reports/jacoco"))
        }

        classDirectories.from(
            sourceSets.main.get().output.classesDirs
        )

        sourceDirectories.from(
            sourceSets.main.get().allSource.srcDirs
        )
    }

    // Ensure reports are generated even for single test tasks
    listOf(quarkusTest, quarkusIntegrationTest).forEach { testTask ->
        testTask.finalizedBy(jacocoTestReport)
    }
}