


FROM registry.access.redhat.com/ubi8/openjdk-21

# Disable fastestmirror plugin and allow unavailable repos to be skipped
RUN echo "fastestmirror=False" >> /etc/dnf/dnf.conf && \
    echo "skip_if_unavailable=True" >> /etc/dnf/dnf.conf

# Add retry logic to handle intermittent 503 errors
RUN bash -c 'for i in {1..5}; do microdnf install -y curl unzip && break || sleep 5; done'

# Optionally, disable SSL verification if you're having SSL issues (not recommended for production)
# RUN sed -i 's/sslverify=1/sslverify=0/' /etc/yum.repos.d/*.repo

WORKDIR /app


docker run --rm java-app-with-cert keytool -list -keystore $JAVA_HOME/lib/security/cacerts -storepass changeit
# Use JBoss OpenJDK 21 base image
FROM registry.access.redhat.com/ubi8/openjdk-21:1.17

# Set environment variables for Java
ENV JAVA_HOME=/usr/lib/jvm/java-21-openjdk
ENV PATH="$JAVA_HOME/bin:$PATH"

# Copy the certificate into the image
COPY mycert.crt /usr/local/share/ca-certificates/mycert.crt

# Import the certificate into the Java TrustStore
RUN keytool -importcert \
    -noprompt \
    -trustcacerts \
    -alias mycert \
    -file /usr/local/share/ca-certificates/mycert.crt \
    -keystore $JAVA_HOME/lib/security/cacerts \
    -storepass changeit

# Continue with your application setup...
# Example: Copy the application JAR (if you have one)
# COPY target/myapp.jar /app/myapp.jar

# Example: Expose a port for the application (adjust accordingly)
# EXPOSE 8080

# Example: Run the application (adjust accordingly)
# CMD ["java", "-jar", "/app/myapp.jar"]

#!/bin/bash

# Set your image name
IMAGE_NAME="java-app-with-cert"
CONTAINER_NAME="my-running-container"

# Check if the container is running
CONTAINER_ID=$(docker ps --filter "name=$CONTAINER_NAME" --filter "ancestor=$IMAGE_NAME" -q)

if [ -n "$CONTAINER_ID" ]; then
  echo "Container is already running. Executing a command inside the container..."

  # Run your command inside the running container (e.g., 'bash')
  docker exec -it $CONTAINER_ID bash

else
  echo "Container is not running. Starting a new container from the image..."

  # Start a new container from the image
  docker run -d --name $CONTAINER_NAME $IMAGE_NAME

  # Optionally run a command inside the new container
  docker exec -it $CONTAINER_NAME bash
fi

